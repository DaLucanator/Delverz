using System.Collections;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using Unity.VisualScripting;
using UnityEngine;
using UnityEngine.Tilemaps;

public enum ColliderType
{
    player,
    wall,
    projectile,
    ground,
    groundObject,
    air
}

public enum Collision
{
    nonCollision,
    triggeringCollision,
    hardCollision
}

public struct DelverzTileData
{
    public Player playerRef;
    public ColliderType colliderType;
    public DelverzTile tile;

    public DelverzTileData(Player playerRef, ColliderType colliderType, DelverzTile tile)
    {
        this.playerRef = playerRef;
        this.colliderType = colliderType;
        this.tile = tile;
    }
}

public class GridManager : MonoBehaviour
{
    public static GridManager current;

    public static Tilemap tilemap;

    static Dictionary<Bounds, DelverzTileData> tileDictionaryLayer1 = new Dictionary<Bounds, DelverzTileData>();
    static Dictionary<Bounds, DelverzTileData> tileDictionaryLayer2 = new Dictionary<Bounds, DelverzTileData>();
    static Dictionary<Bounds, DelverzTileData> tileDictionaryLayer3 = new Dictionary<Bounds, DelverzTileData>();

    private Dictionary<Bounds, DelverzTileData>[] tileDictionaries = { tileDictionaryLayer1, tileDictionaryLayer2, tileDictionaryLayer3 };

    private void Awake()
    {
        current= this;
    }

    public void AddToTileDictionary (int tileLayer, Bounds tileBounds, DelverzTileData tileData)
    {
        tileDictionaries[tileLayer].Add (tileBounds, tileData);
    }

    public List<DelverzTileData> ReturnIntersectTiles (Bounds moveBounds, DelverzTileData myTileData)
    {
        List<DelverzTileData> intersectingTiles = new List<DelverzTileData> ();

        //for each layer of the tile dictionary
        for (int i = 2; i >= 0; i--)
        {
            //if the bounding box generated by my vector contains a bounding box from this dictionary
            foreach (KeyValuePair<Bounds, DelverzTileData> boundsY in tileDictionaries[i])
            {
                if (moveBounds.Intersects(boundsY.Key))
                {
                    DelverzTileData tileIAmTraversingTo = boundsY.Value;
                    ColliderType otherColliderType = tileIAmTraversingTo.colliderType;
                    ColliderType myColliderType = myTileData.colliderType;

                    //Check for wall (Hard Collision)
                    if ((myColliderType == ColliderType.player || myColliderType == ColliderType.projectile) && otherColliderType == ColliderType.wall) { return null; }

                    //check for player if player is not me (also hard collision)
                    if (myColliderType == ColliderType.player && otherColliderType == ColliderType.player && tileIAmTraversingTo.playerRef != myTileData.playerRef) { return null; }

                    else { intersectingTiles.Add(boundsY.Value); Debug.Log("wee"); }
                }
            }
        }
        return intersectingTiles;
    }



    public void TraverseTile(List<DelverzTileData> tilesToTraverseTo, DelverzTileData myTileData)
    {
        foreach(DelverzTileData tileIAmTraversingTo in tilesToTraverseTo)
        {
            Debug.Log(tileIAmTraversingTo.tile);
            tileIAmTraversingTo.tile.Trigger(myTileData);
        }
    }
}
