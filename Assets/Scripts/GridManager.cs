using System.Collections;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using Unity.VisualScripting;
using UnityEngine;
using UnityEngine.Tilemaps;

public enum ColliderType
{
    player,
    wall,
    projectile,
    ground,
    groundObject,
    air
}

public enum Collision
{
    nonCollision,
    triggeringCollision,
    hardCollision
}

public class GridManager : MonoBehaviour
{
    public static GridManager current;

    public static Tilemap tilemap;

    static Dictionary<Bounds, DelverzTile> tileDictionaryLayer1 = new Dictionary<Bounds, DelverzTile>();
    static Dictionary<Bounds, DelverzTile> tileDictionaryLayer2 = new Dictionary<Bounds, DelverzTile>();
    static Dictionary<Bounds, DelverzTile> tileDictionaryLayer3 = new Dictionary<Bounds, DelverzTile>();

    private Dictionary<Bounds, DelverzTile>[] tileDictionaries = { tileDictionaryLayer1, tileDictionaryLayer2, tileDictionaryLayer3 };

    private void Awake()
    {
        current= this;
    }

    public void AddToTileDictionary (int tileLayer, Bounds tileBounds, DelverzTile tile)
    {
        tileDictionaries[tileLayer].Add (tileBounds, tile);
    }

    public void RemoveTileFromDictionary(int tileLayer, Bounds tileBounds)
    {
        tileDictionaries[tileLayer].Remove(tileBounds);
    }

    public List<DelverzTile> ReturnIntersectTiles (Bounds moveBounds, DelverzTile myTile)
    {
        List<DelverzTile> intersectingTiles = new List<DelverzTile> ();

        //for each layer of the tile dictionary
        for (int i = 3; i >= 0; i--)
        {
            //if the bounding box generated by my vector contains a bounding box from this dictionary
            foreach (KeyValuePair<Bounds, DelverzTile> boundsY in tileDictionaries[i])
            {
                if (moveBounds.Intersects(boundsY.Key))
                {
                    DelverzTile tileIAmTraversingTo = boundsY.Value;
                    ColliderType otherColliderType = tileIAmTraversingTo.ReturnColliderType();
                    ColliderType myColliderType = myTile.ReturnColliderType();

                    //Check for wall (Hard Collision)
                    if ((myColliderType == ColliderType.player || myColliderType == ColliderType.projectile) && otherColliderType == ColliderType.wall) { return null; }

                    //Check for player if I'm a player and the player is not me (also Hard Collision)
                    if (myColliderType == ColliderType.player && otherColliderType == ColliderType.player && tileIAmTraversingTo != myTile) { return null; }

                    //otherwise it's a non or triggering collision.
                    if(tileIAmTraversingTo != myTile) { intersectingTiles.Add(boundsY.Value); Debug.Log("wee"); }
                }
            }
        }
        return intersectingTiles;
    }
}
